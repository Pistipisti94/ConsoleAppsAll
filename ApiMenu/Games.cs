    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ApiMenu;
//
//    var games = Games.FromJson(jsonString);

namespace ApiMenu
{

    public partial class Games
    {
        [JsonProperty("id", Required = Required.Always)]
        public long Id { get; set; }

        [JsonProperty("title", Required = Required.Always)]
        public string Title { get; set; }

        [JsonProperty("thumbnail", Required = Required.Always)]
        public Uri Thumbnail { get; set; }

        [JsonProperty("status", Required = Required.Always)]
        public string Status { get; set; }

        [JsonProperty("short_description", Required = Required.Always)]
        public string ShortDescription { get; set; }

        [JsonProperty("description", Required = Required.Always)]
        public string Description { get; set; }

        [JsonProperty("game_url", Required = Required.Always)]
        public Uri GameUrl { get; set; }

        [JsonProperty("genre", Required = Required.Always)]
        public string Genre { get; set; }

        [JsonProperty("platform", Required = Required.Always)]
        public string Platform { get; set; }

        [JsonProperty("publisher", Required = Required.Always)]
        public string Publisher { get; set; }

        [JsonProperty("developer", Required = Required.Always)]
        public string Developer { get; set; }

        [JsonProperty("release_date", Required = Required.Always)]
        public DateTimeOffset ReleaseDate { get; set; }

        [JsonProperty("freetogame_profile_url", Required = Required.Always)]
        public Uri FreetogameProfileUrl { get; set; }

        [JsonProperty("minimum_system_requirements", Required = Required.Always)]
        public MinimumSystemRequirements MinimumSystemRequirements { get; set; }

        [JsonProperty("screenshots", Required = Required.Always)]
        public Screenshot[] Screenshots { get; set; }
    }

    public partial class MinimumSystemRequirements
    {
        [JsonProperty("os", Required = Required.Always)]
        public string Os { get; set; }

        [JsonProperty("processor", Required = Required.Always)]
        public string Processor { get; set; }

        [JsonProperty("memory", Required = Required.Always)]
        public string Memory { get; set; }

        [JsonProperty("graphics", Required = Required.Always)]
        public string Graphics { get; set; }

        [JsonProperty("storage", Required = Required.Always)]
        public string Storage { get; set; }
    }

    public partial class Screenshot
    {
        [JsonProperty("id", Required = Required.Always)]
        public long Id { get; set; }

        [JsonProperty("image", Required = Required.Always)]
        public Uri Image { get; set; }
    }

    public partial class Games
    {
        public static Games FromJson(string json) => JsonConvert.DeserializeObject<Games>(json, ApiMenu.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Games self) => JsonConvert.SerializeObject(self, ApiMenu.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
